# this script save the trasformed and shared feature timeseries based on SRM trained by the whole story
# spock doesn't have the version of sklearn srm requires.
# create an custom enviromen and activate it before using srm 
# conda create -n srmEnv 
# source activate srmEnv
# conda install -n srmEnv pip
module load anacondapy/3.4
module load pyger
source activate srmEnv
python

# in python
# train with the AB part and apply to the C part
import scipy.io
from scipy.stats import stats
from sklearn.metrics import confusion_matrix
from sklearn.svm import NuSVC
from sklearn.svm import LinearSVC
import numpy as np
import brainiak.funcalign.srm
import os
import glob
import ntpath

# experiment specific parameters
expdir = '/mnt/sink/scratch/claire/speaker-listener/'
timeUnit='tr'
froidir='/mor/'

exp='merlin'
# load mat file
for roiname in  glob.glob(os.path.join(expdir + '/' + exp + '/fmri/timeseries/' + timeUnit + '/roi/' + froidir , 'zscore_listenerAll_dPCC*.mat')):
    data_mat=scipy.io.loadmat(roiname)
    gdata=data_mat['gdata']
    data_mat=scipy.io.loadmat(roiname.replace('listenerAll','speaker'))
    data_speaker=data_mat['data']
    
    if gdata.shape[0]>50:
        # Convert data to a list of arrays matching SRM input.
        # Each element is a matrix of voxels by TRs.
        listenerN = gdata.shape[2]
        
        data = []
        for s in range(listenerN):
              data.append(np.concatenate([gdata[:, :, s]], axis=0))
        data.append(np.concatenate([data_speaker],axis=0))
        
    
        # help(brainiak.funcalign.srm.SRM)
        srm = brainiak.funcalign.srm.SRM(n_iter=10, features=50)
        srm.fit(data)
        
        srm_resid=[]
        for s in range(len(data)):
            srm_resid.append(data[s]-np.dot(srm.w_[s],srm.s_))
            
            temp=np.stack(srm_resid,axis=2)
            roiname=os.path.splitext(os.path.basename(roiname))[0]
            scipy.io.savemat(expdir + '/' + exp + '/fmri/timeseries/' + timeUnit + '/roi/' + froidir + roiname + '_SRMresid_.mat', dict(gdata=temp[:,:,0:-1]))
            scipy.io.savemat(expdir + '/' + exp + '/fmri/timeseries/' + timeUnit + '/roi/' + froidir + roiname.replace('listenerAll','speaker') + '_SRMresid_.mat', dict(gdata=temp[:,:,-1]))



