## create a new enviroment with conda and install brainiak in the created enviroment
# module load anacondapy/3.4
# conda create -n bnk python=3.4
# source activate bnk python=3.4
# conda install -c brainiak -c defaults -c conda-forge brainiak

# https://www.digitalocean.com/community/tutorials/how-to-install-run-connect-to-jupyter-notebook-on-remote-server
# open python in the conda enviroment where brainiak is installed
module load anacondapy/3.4
module load pyger
source activate bnk
export $(dbus-launch)
python

""
import brainiak.eventseg.event
import numpy as np
import glob
import os
import scipy.io
from scipy.stats import stats
import logging
import matplotlib.pyplot as plt

logging.basicConfig(level=logging.DEBUG)

# experiment specific parameters
expdir = '/mnt/sink/scratch/claire/speaker-listener/'
timeUnit='tr'
froidir='mor';
exps=['pieman','bronx','merlin','sherlock']
rname='dPCC'
   
# load mat file
for exp in [exps[2]]:
    for fname in  glob.glob(os.path.join(expdir + '/' + exp + '/fmri/timeseries/' + timeUnit + '/roi/' + froidir , 'zscore_listenerAll_'+rname+'.mat')):
        data_mat=scipy.io.loadmat(fname)
        gdata=data_mat['gdata']
        
        tn=gdata.shape[1]
        subjn=gdata.shape[2]
        voxn=gdata.shape[0]
        
        segments_others= np.empty((120,tn,subjn))
        segments_others[:]=np.nan
        segments_self= np.empty((120,tn,subjn))
        segments_self[:]=np.nan
      
        for s in range(subjn):
            if np.sum(~np.isnan(gdata[:,:,s]))>0:
                othersi=np.arange(subjn)
                othersi=othersi[othersi!=s]
                others=np.nanmean(gdata[:,:,othersi],axis=2)
                self=gdata[:,:,s]
                
               
                for Ki in range(27,28):#range(9,120):
                    K=Ki+1;
                    # Find the events in this dataset
                    seg = brainiak.eventseg.event.EventSegment(K)
                    seg.fit(others.T) 
                    evi=seg.segments_[0].argmax(axis=1)+1
                    segments_others[Ki,:,s]=evi
                    
                    segments, logLK=seg.find_events(gdata[:,:,s].T);#, scramble=True)
                    evi=segments.argmax(axis=1)+1
                    segments_self[Ki,:,s]=evi
            
        scipy.io.savemat(expdir +'/scripts_speaker-listener/'+exp+'_'+rname+'_hmm_ListenersLeave1Out.mat', {'segments_others':segments_others,'segments_self':segments_self})
