## create a new enviroment with conda and install brainiak in the created enviroment
# module load anacondapy/3.4
# conda create -n bnk python=3.4
# source activate bnk python=3.4
# conda install -c brainiak -c defaults -c conda-forge brainiak

# https://www.digitalocean.com/community/tutorials/how-to-install-run-connect-to-jupyter-notebook-on-remote-server
# open python in the conda enviroment where brainiak is installed
module load anacondapy/3.4
module load pyger
source activate bnk
export $(dbus-launch)
python

""
import brainiak.eventseg.event
import numpy as np
import glob
import os
import scipy.io
from scipy.stats import stats
import logging
import matplotlib.pyplot as plt

logging.basicConfig(level=logging.DEBUG)

# experiment specific parameters
expdir = '/mnt/sink/scratch/claire/speaker-listener/'
timeUnit='tr'
froidir='mor';
exps=['pieman','bronx','merlin','sherlock']
rname='aCUN'
    
# load mat file
for exp in [exps[2]]:
        fname=glob.glob(os.path.join(expdir + '/' + exp + '/fmri/timeseries/' + timeUnit + '/roi/' + froidir , 'zscore_speaker_'+rname+'.mat'))
        data_mat=scipy.io.loadmat(fname[0])
        data=data_mat['data']
        
        fname=glob.glob(os.path.join(expdir + '/' + exp + '/fmri/timeseries/' + timeUnit + '/roi/' + froidir , 'zscore_listenerAll_'+rname+'.mat'))
        data_mat=scipy.io.loadmat(fname[0])
        gdata=data_mat['gdata']
        g=np.mean(gdata,axis=2)
        
        tn=gdata.shape[1]
        subjn=gdata.shape[2]
        voxn=gdata.shape[0]
        
        segments_LG=np.empty((120,tn,120))
        segments_LG[:]=np.nan

        segments_S= np.empty((120,tn,120))
        segments_S[:]=np.nan

        eventLabels_S= np.empty((120,tn))
        eventLabels_S[:]=np.nan

        eventLabels_LG= np.empty((120,tn))
        eventLabels_LG[:]=np.nan
        
        for Ki in range(27,28):#range(9,120):
            K=Ki+1;
            # Find the events in this dataset
            seg = brainiak.eventseg.event.EventSegment(K)
            seg.fit(g.T) 
            # evi=seg.segments_[0].argmax(axis=1)+1
            segments_LG[Ki,:,0:(Ki+1)]=seg.segments_[0]
            eventLabels_LG[Ki,:]=seg.predict(g.T)
            
            segments_S[Ki,:,0:(Ki+1)], _=seg.find_events(data.T);#, scramble=True)
            eventLabels_S[Ki,:]=seg.predict(data.T)
            
                    
                    # wbrs[Ki,0,s]=score(evi,self)
        scipy.io.savemat(expdir +'/scripts_speaker-listener/'+exp+'_'+rname+'_hmm_findListenersEventInSpeaker.mat', {'segments_LG':segments_LG,'segments_S':segments_S,'logLK':logLK})
    #    scipy.io.savemat(expdir +'/scripts_speaker-listener/'+exp+'_'+rname+'_hmm.mat', {'wbrs':wbrs,'segments_L':segments_L})


